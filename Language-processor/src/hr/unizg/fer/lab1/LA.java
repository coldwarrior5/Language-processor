package hr.unizg.fer.lab1;

import java.util.List;
import java.util.ArrayList;

public class LA{

	private static String mInput;
	private static int mCurrentLine;
	private static int mCurrentState;
	private static int mInitialState = 0;
	private static int mLastProcessedPos;
	private static int mReaderPos;
	private static List<LexicalRule> mLexRules = new ArrayList<LexicalRule>();
	private static List<LA_OutputElement> mOutput = new ArrayList<LA_OutputElement>();

	private static void Initialize(){
		LexicalRule temp;
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("\\t|\\_");
		temp.mDiscardString = true;
		temp.mLexicalTokenName = "null";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("\\n");
		temp.mDiscardString = true;
		temp.mLexicalTokenName = "null";
		temp.mNewLine = true;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("//");
		temp.mDiscardString = true;
		temp.mLexicalTokenName = "null";
		temp.mNewLine = false;
		temp.mGoToState = true;
		temp.mGoToStateId = 2;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 2;
		temp.mENFA = new NFA("\\n");
		temp.mDiscardString = true;
		temp.mLexicalTokenName = "null";
		temp.mNewLine = true;
		temp.mGoToState = true;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 2;
		temp.mENFA = new NFA("(\\(|\\)|\\{|\\}|\\||\\*|\\\\|\\$|\\t|\\n|\\_|!|\"|#|%|&|'|+|,|-|.|/|0|1|2|3|4|5|6|7|8|9|:|;|<|=|>|?|@|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|]|^|_|`|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|~)");
		temp.mDiscardString = true;
		temp.mLexicalTokenName = "null";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("/\\*");
		temp.mDiscardString = true;
		temp.mLexicalTokenName = "null";
		temp.mNewLine = false;
		temp.mGoToState = true;
		temp.mGoToStateId = 1;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 1;
		temp.mENFA = new NFA("\\*/");
		temp.mDiscardString = true;
		temp.mLexicalTokenName = "null";
		temp.mNewLine = false;
		temp.mGoToState = true;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 1;
		temp.mENFA = new NFA("\\n");
		temp.mDiscardString = true;
		temp.mLexicalTokenName = "null";
		temp.mNewLine = true;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 1;
		temp.mENFA = new NFA("(\\(|\\)|\\{|\\}|\\||\\*|\\\\|\\$|\\t|\\n|\\_|!|\"|#|%|&|'|+|,|-|.|/|0|1|2|3|4|5|6|7|8|9|:|;|<|=|>|?|@|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|]|^|_|`|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|~)");
		temp.mDiscardString = true;
		temp.mLexicalTokenName = "null";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("\"");
		temp.mDiscardString = true;
		temp.mLexicalTokenName = "null";
		temp.mNewLine = false;
		temp.mGoToState = true;
		temp.mGoToStateId = 3;
		temp.mReturn = true;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 3;
		temp.mENFA = new NFA("\"((\\(|\\)|\\{|\\}|\\||\\*|\\\\|\\$|\\t|\\_|!|#|%|&|'|+|,|-|.|/|0|1|2|3|4|5|6|7|8|9|:|;|<|=|>|?|@|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|]|^|_|`|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|~)|\\\\\")*\"");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "NIZ_ZNAKOVA";
		temp.mNewLine = false;
		temp.mGoToState = true;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("break");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "KR_BREAK";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("char");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "KR_CHAR";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("const");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "KR_CONST";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("continue");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "KR_CONTINUE";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("else");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "KR_ELSE";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("for");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "KR_FOR";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("if");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "KR_IF";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("int");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "KR_INT";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("return");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "KR_RETURN";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("void");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "KR_VOID";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("while");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "KR_WHILE";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("(_|(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z))(_|(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)|(0|1|2|3|4|5|6|7|8|9))*");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "IDN";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("(0|1|2|3|4|5|6|7|8|9)(0|1|2|3|4|5|6|7|8|9)*");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "BROJ";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("0(X|x)((0|1|2|3|4|5|6|7|8|9)|a|b|c|d|e|f|A|B|C|D|E|F)((0|1|2|3|4|5|6|7|8|9)|a|b|c|d|e|f|A|B|C|D|E|F)*");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "BROJ";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("'(\\(|\\)|\\{|\\}|\\||\\*|\\\\|\\$|\\_|!|\"|#|%|&|+|,|-|.|/|0|1|2|3|4|5|6|7|8|9|:|;|<|=|>|?|@|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|]|^|_|`|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|~)'");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "ZNAK";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("'\\\\(\\(|\\)|\\{|\\}|\\||\\*|\\\\|\\$|\\_|!|\"|#|%|&|'|+|,|-|.|/|0|1|2|3|4|5|6|7|8|9|:|;|<|=|>|?|@|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|]|^|_|`|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|~)'");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "ZNAK";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("++");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_INC";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("--");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_DEC";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("+");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "PLUS";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("-");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "MINUS";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("\\*");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_PUTA";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("/");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_DIJELI";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("%");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_MOD";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("=");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_PRIDRUZI";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("<");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_LT";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("<=");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_LTE";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA(">");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_GT";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA(">=");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_GTE";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("==");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_EQ";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("!=");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_NEQ";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("!");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_NEG";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("~");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_TILDA";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("&&");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_I";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("\\|\\|");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_ILI";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("&");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_BIN_I";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("\\|");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_BIN_ILI";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("^");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "OP_BIN_XILI";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA(",");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "ZAREZ";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA(";");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "TOCKAZAREZ";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("\\(");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "L_ZAGRADA";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("\\)");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "D_ZAGRADA";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("\\{");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "L_VIT_ZAGRADA";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("\\}");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "D_VIT_ZAGRADA";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("[");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "L_UGL_ZAGRADA";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
		temp = new LexicalRule();
		temp.mLexicalState = 0;
		temp.mENFA = new NFA("]");
		temp.mDiscardString = false;
		temp.mLexicalTokenName = "D_UGL_ZAGRADA";
		temp.mNewLine = false;
		temp.mGoToState = false;
		temp.mGoToStateId = 0;
		temp.mReturn = false;
		temp.mReturnAt = 0;
		mLexRules.add(temp);
	}

	private static void ApplyRule(int ruleIndex){
		LA_OutputElement temp = new LA_OutputElement();
		temp.mLine = mCurrentLine;
		temp.mUniformToken = mLexRules.get(ruleIndex).mLexicalTokenName;
		if (mLexRules.get(ruleIndex).mNewLine) ++mCurrentLine;
		if (mLexRules.get(ruleIndex).mGoToState) mCurrentState = mLexRules.get(ruleIndex).mGoToStateId;
		if (mLexRules.get(ruleIndex).mReturn){
			temp.mLexicUint = mInput.substring(mLastProcessedPos + 1, mLastProcessedPos + mLexRules.get(ruleIndex).mReturnAt + 1);
			mLastProcessedPos += mLexRules.get(ruleIndex).mReturnAt;
		}
		else{
			temp.mLexicUint = mInput.substring(mLastProcessedPos + 1, mReaderPos + 1);
			mLastProcessedPos = mReaderPos;
		}
		if (!mLexRules.get(ruleIndex).mDiscardString) mOutput.add(temp);
	}

	public static void main(String[] args){
		mCurrentState = mInitialState;
		mLastProcessedPos = -1;
		mCurrentLine = 1; // We start with first line of code.
		Initialize();

		// Now the input and analysis.
		mInput = UtilitiesLA.ReadStringFromInput();
		while(mLastProcessedPos < mInput.length() - 1){
			mReaderPos = mLastProcessedPos + 1;
			for(int i = 0; i < mLexRules.size(); ++i) mLexRules.get(i).mENFA.Reset_eNFA(); // Resets the eNFAs for new lexic unit analysis.
			int bestRuleToApplySoFar = Integer.MAX_VALUE;
			Boolean canApplyRule;
			int tempReaderPos = mReaderPos;
			do{ // loops for each character from mReaderPos to the end.
				int bestRuleToApply = Integer.MAX_VALUE;
				canApplyRule = false;
				Boolean breakLoop = true;
				for(int i = 0; i < mLexRules.size(); ++i){
					if (mLexRules.get(i).mLexicalState == mCurrentState && !mLexRules.get(i).mENFA.DoesNotAccept_eNFA()){
						mLexRules.get(i).mENFA.InputChar_eNFA(mInput.charAt(tempReaderPos));
						breakLoop = false;
						if (mLexRules.get(i).mENFA.IsInAcceptableState_eNFA()){
							canApplyRule = true;
							if (i < bestRuleToApply) bestRuleToApply = i;
						}
					}
				}
				if (canApplyRule){
					bestRuleToApplySoFar = bestRuleToApply;
					mReaderPos = tempReaderPos;
				}
				++tempReaderPos;
				if (breakLoop) break; // every automata has rejected our input
			}while(tempReaderPos < mInput.length());

			if (bestRuleToApplySoFar != Integer.MAX_VALUE)ApplyRule(bestRuleToApplySoFar);
			else mLastProcessedPos += 1; // error recovery
		}

		// We are done, just write that...
		for (int i = 0; i < mOutput.size(); ++i) 
			System.out.println(mOutput.get(i).mUniformToken + " " + mOutput.get(i).mLine + " " + mOutput.get(i).mLexicUint);

	}
}