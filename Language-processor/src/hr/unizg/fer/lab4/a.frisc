	`BASE D	;postavi bazu 10
	MOVE 40000, R7
	MOVE F_GCD, R0	;definicija funkcije gcd
	STORE R0, (G_GCD)
	MOVE F_MAIN, R0	;definicija funkcije main
	STORE R0, (G_MAIN)
	CALL F_MAIN
	HALT

F_GCD	LOAD R0, (R7+8)	;dohvacam m
	PUSH R0
	MOVE %D 0, R0
	PUSH R0
	POP R1	;operator jednakosnog izraza ==: pocetak
	POP R0
	CMP R0, R1	;usporedba
	JR_EQ JI_ISTINA_2	;skoci na JI_ISTINA_ ako je R0 manji
	MOVE %D 0, R0	;izraz nije istinit
	JR JI_DALJE_2	;preskoci postavljanje R0 u 1
JI_ISTINA_2	MOVE %D 1, R0	;izraz je istinit
JI_DALJE_2	PUSH R0	;postavi rezultat na stog
	POP R0	;if naredba: skini izraz sa stoga
	CMP R0, 0	;if naredba: provjeri ako je izraz jednak 0
	JR_EQ NG_DALJE_1_0	;if naredba: ako je onda preskoci dio koda
	LOAD R0, (R7+4)	;dohvacam n
	PUSH R0
	POP R6	;povratna vrijednost sa stoga
	RET
	JR NG_DALJE_2_0	;if naredba: preskoci ELSE dio koda
NG_DALJE_1_0	MOVE G_GCD, R0	;dohvacam adresu gcd
	PUSH R0
	POP R0	;dohvati adresu adrese funkcije
	LOAD R5, (R0)	;dohvati adresu funkcije
	LOAD R0, (R7+4)	;dohvacam n
	PUSH R0
	LOAD R0, (R7+12)	;dohvacam m
	PUSH R0
	CALL LF_MOD	;multiplikativni izraz (MOD):operandi su vec na stogu
	POP R0	;multiplikativni izraz: skidanje operanada
	POP R0	;multiplikativni izraz: skidanje operanada
	PUSH R6	;multiplikativni izraz: potrebno je rezultat staviti na stog
	LOAD R0, (R7+12)	;dohvacam m
	PUSH R0
	CALL (R5)
	POP R0
	POP R0
	PUSH R6
	POP R6	;povratna vrijednost sa stoga
	RET
NG_DALJE_2_0	RET	;dodaj RET u slucaju da nije bio eksplicitno pozvan

F_MAIN	MOVE G_GCD, R0	;dohvacam adresu gcd
	PUSH R0
	POP R0	;dohvati adresu adrese funkcije
	LOAD R5, (R0)	;dohvati adresu funkcije
	MOVE %D 20, R0
	PUSH R0
	MOVE %D 6, R0
	PUSH R0
	CALL (R5)
	POP R0
	POP R0
	PUSH R6
	POP R6	;povratna vrijednost sa stoga
	RET
	RET	;dodaj RET u slucaju da nije bio eksplicitno pozvan

LF_MOD	LOAD R1, (R7+4)	;dohvacam y
	LOAD R0, (R7+8)	;dohvacam x
LF_MOD_UVIJET	CMP R0, R1
	JR_SLT LF_MOD_KRAJ
	SUB R0, R1, R0
	JR LF_MOD_UVIJET
LF_MOD_KRAJ	ADD R0, 0, R6
	RET	;vrati x%y

G_GCD	DW %D 0
G_MAIN	DW %D 0

